#!/usr/bin/env python3

from packaging.version import Version
from argparse import ArgumentParser
from tarfile import open as taropen
from datetime import datetime
from os import makedirs,replace
from json import load,dump
from colorama import Fore
from shutil import rmtree
from os import path
def log(text:str,color:str):print(color+f'[Tulpar Server, APGunpacker] ({datetime.now().strftime("%H:%M:%S")}) {text}')
archive_path=ArgumentParser()
archive_path.add_argument('archivepath')
archive_path=archive_path.parse_args().archivepath
if not path.exists(archive_path):
    log(f'Archive {archive_path} is not found.',Fore.RED)
    exit(0)
package_name=path.basename(archive_path)
log(f'Retrieving metadata from {package_name}...',Fore.BLUE)
from random import randint
try:
    with taropen(archive_path,'r:xz')as archive:
        temp_metadata_path=str(randint(1,99999999999999))
        archive.extract('metadata.json',temp_metadata_path,filter='fully_trusted')
        archive.close()
except Exception as e:log(f'Failed to extract metadata from package: {e} This package is not passed apgcheck!',Fore.RED)
metadata:dict=load(open(path.join(temp_metadata_path,'metadata.json')))
package_name,package_arch=metadata['name'],metadata['architecture']
if not package_arch in['x86_64','aarch64','i386']:
    log(f'Note: unknown architecture value ({package_arch}) detected, selecting other value... This package is not passed apgcheck!',Fore.YELLOW)
    if'amd'in package_arch:package_arch='x86_64'
    elif'x86'in package_arch:package_arch='i386'
    elif'arm' in package_arch or'aarch'in package_arch:package_arch='aarch64'
    else:
        log('Failed to change architecture of package!',Fore.RED)
        exit(1)
package_path=path.join('packages',package_name)
package_version=Version(metadata['version'])
package_arch_path=path.join(package_path,package_arch)
main_metadata_path=path.join(package_path,'metadata.json')
new_version_package_path=path.join(package_arch_path,package_version.base_version+'.apg')
if path.exists(package_path):
    log('This package is exists in this server, checking...',Fore.CYAN)
    with open(main_metadata_path,'r')as main_metadata:
        main_metadata_content=load(main_metadata)
        main_metadata.close()
    if not package_arch in main_metadata_content['architecture']:
        log('The package of new architecture will be added...',Fore.GREEN)
        makedirs(package_arch_path)
    else:log('The package of this architecture is already added!',Fore.BLUE)
    if package_version>Version(main_metadata_content['version']):
        log('The package of newer version will be added...',Fore.GREEN)
        replace(archive_path,new_version_package_path)
    elif path.exists(new_version_package_path):log('The package of this version is already added!',Fore.BLUE)
    else:log('The package of older version will be added.',Fore.YELLOW)
    for key,value in main_metadata_content.items():
        if key=='architecture':main_metadata_content['architecture'].append(package_arch)
        else:main_metadata_content[key]=metadata[key]
    with open(main_metadata_path,'wt')as main_metadata:
        dump(main_metadata_content,main_metadata)
        main_metadata.close()
else:
    log('Adding a new package...',Fore.GREEN)
    makedirs(package_arch_path)
    replace(archive_path,new_version_package_path)
    log('Parsing a main metadata...',Fore.GREEN)
    metadata['architecture']=[metadata['architecture']]
    with open(main_metadata_path,'xt')as main_metadata:
        dump(metadata,main_metadata)
        main_metadata.close()
rmtree(temp_metadata_path)